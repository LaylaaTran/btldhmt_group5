//============================BAN_GHE===============================
mat4 model_ban, model_view_ban;

void mat_ban(float x, float y, float z, float x1, float y1, float z1)
{
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(x1, y1, z1));
	mat4 model_base = model_ban * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 0.68, 0.5, 0.37);
	glDrawArrays(GL_TRIANGLES, 0, 36);
}

void chan_ban(float x, float y, float z, float x1, float y1, float z1) 
{
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(x1, y1, z1));
	mat4 model_base = model_ban * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 0.68, 0.5, 0.37);
	glDrawArrays(GL_TRIANGLES, 0, 36);
}

void ban(float x, float y, float z, int goc)
{
	model_ban = translate(vec3(x, y, z)) * rotate_y(goc) * scale(vec3(1, 1, 1));
	mat_ban(0.0, 0.0, 0.0, 2.4, 0.1, 3.4);
	chan_ban(0.9, -1.2, 1.4, 0.2, 2.5, 0.2);
	chan_ban(0.9, -1.2, -1.4, 0.2, 2.5, 0.2);
	chan_ban(-0.9, -1.2, 1.4, 0.2, 2.5, 0.2);
	chan_ban(-0.9, -1.2, -1.4, 0.2, 2.5, 0.2);
}

//-------------------ghe--------------------
mat4 model_ghe, model_view_ghe;
float gg[] = { 0, 0, 0 };

void mat_ghe(float x, float y, float z, float x1, float y1, float z1) 
{
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(x1, y1, z1));
	mat4 model_base = model_ghe * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 1, 0.82, 0.35);
	glDrawArrays(GL_TRIANGLES, 0, 36);
}

void chan_ghe(float x, float y, float z, float x1, float y1, float z1) 
{
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(x1, y1, z1));
	mat4 model_base = model_ghe * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 0.2, 0.2, 0.2);
	glDrawArrays(GL_TRIANGLES, 0, 36);
}

void tua_ghe(float x, float y, float z, float x1, float y1, float z1) {
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(x1, y1, z1));
	mat4 model_base = model_ghe * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 1, 0.82, 0.35);
	glDrawArrays(GL_TRIANGLES, 0, 36);
}

void ghe(float x, float y, float z, int goc)
{
	model_ghe = translate(vec3(x, y, z)) * rotate_y(goc) * scale(vec3(1, 1, 1));
	model_ghe = model_ghe * translate(vec3(gg[0], 0, 0));
	mat_ghe(0.0, 0.0, 0.0, 1.5, 0.1, 1.0);
	chan_ghe(0.65, -1.05, 0.4, 0.2, 2.0, 0.2);
	chan_ghe(0.65, -1.05, -0.4, 0.2, 2.0, 0.2);
	chan_ghe(-0.65, -1.05, 0.4, 0.2, 2.0, 0.2);
	chan_ghe(-0.65, -1.05, -0.4, 0.2, 2.0, 0.2);
	tua_ghe(-0.675, 0.75, 0, 0.15, 1.5, 1.0);
}

void ban_ghe() {
	//Ban1
	ban(-4, -4.55, -4.0, 90);
	ghe(-3.25, -4.95, -6.5, -90);
	ghe(-3.25, -4.95, -1.5, 90);
	ghe(-4.75, -4.95, -6.5, -90);
	ghe(-4.75, -4.95, -1.5, 90);

	// Bàn 2 
	ban(-4, -4.55, 3.0, 90);
	ghe(-3.25, -4.95, 0.5, -90);
	ghe(-3.25, -4.95, 5.5, 90);
	ghe(-4.75, -4.95, 0.5, -90);
	ghe(-4.75, -4.95, 5.5, 90);

	// Bàn 3
	ban(-4, -4.55, 10.0, 90);
	ghe(-3.25, -4.95, 7.5, -90);
	ghe(-3.25, -4.95, 12.5, 90);
	ghe(-4.75, -4.95, 7.5, -90);
	ghe(-4.75, -4.95, 12.5, 90);

	// Bàn 4
	ban(4.0, -4.55, -4.0, 90);
	ghe(4.75, -4.95, -6.5, -90);
	ghe(4.75, -4.95, -1.5, 90);
	ghe(3.25, -4.95, -6.5, -90);
	ghe(3.25, -4.95, -1.5, 90);

	// Bàn 5 
	ban(4.0, -4.55, 3.0, 90);
	ghe(4.75, -4.95, 0.5, -90);
	ghe(4.75, -4.95, 5.5, 90);
	ghe(3.25, -4.95, 0.5, -90);
	ghe(3.25, -4.95, 5.5, 90);

	// Bàn 6
	ban(4.0, -4.55, 10.0, 90);
	ghe(4.75, -4.95, 7.5, -90);
	ghe(4.75, -4.95, 12.5, 90);
	ghe(3.25, -4.95, 7.5, -90);
	ghe(3.25, -4.95, 12.5, 90);
}
