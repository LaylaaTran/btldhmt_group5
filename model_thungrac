//=========================Thung rac========================
mat4 model_thungrac, model_view_thungrac;
float thungrac[] = { 0,0,0 };

void truthungrac(float x, float y, float z)
{
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(0.7, 1.0, 0.9));
	mat4 model_base = model_thungrac * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 0.624, 0.878, 0.894);
	glDrawArrays(GL_TRIANGLES, 0, 36);

}

void Nap_thungrac(float x, float y, float z)
{
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(0.7, 0.1, 1.0));
	mat4 model_base = model_thungrac * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 0.294, 0.702, 0.8);
	glDrawArrays(GL_TRIANGLES, 0, 36);
}

void Nutbat_thrac(float x, float y, float z)
{
	mat4 instance = identity_mat4();
	instance = translate(vec3(x, y, z)) * scale(vec3(0.3, 0.1, 0.2));
	mat4 model_base = model_thungrac * instance;
	glUniformMatrix4fv(model_mat_location, 1, GL_FALSE, model_base.m);
	glUniform3f(glGetUniformLocation(ProgramId, "objectColor"), 0.294, 0.702, 0.8);
	glDrawArrays(GL_TRIANGLES, 0, 36);
}

void caithungrac(float x, float y, float z, float goc)
{
	model_thungrac = translate(vec3(x, y, z)) * rotate_y(goc) * scale(vec3(0.8, 0.8, 0.8));
	truthungrac(0.0, -2.8, 0.0);
	Nutbat_thrac(0.0, -3.1, -0.5);
	model_thungrac = model_thungrac * translate(vec3(0.0, -2.25, 0.5)) * rotate_x(thungrac[0]) * translate(vec3(0.0, 2.25, -0.5));
	Nap_thungrac(0.0, -2.25, 0.0);

}

void nhieu_thungrac()
{
	caithungrac(4,	-4.36, 3.0, 90);
	caithungrac(-4, -4.36, 3.0, -90);
	caithungrac(4,	-4.36, 10.0, 90);
	caithungrac(-4, -4.36, 10.0, -90);
	caithungrac(4,	-4.36, -4.0, 90);
	caithungrac(-4, -4.36, -4.0, -90);
}
